carcom = carcom %>% select(NQUEST, NORD, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, ACOM5)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, ACOM5)
View(carcom)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom = carcom %>% rename("settore" = SETT)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom = read.csv("indagine_2020/carcom20.csv")
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom = carcom %>% rename("settore" = SETT)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti = debiti %>% rename("deb_res_beni_cons" = PFCONS)
debiti = debiti %>% rename("deb_res_mezzi_tras" = TDEBITC)
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
str(debiti)
glimpse(debti)
glimpse(debiti)
summary(debiti)
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
View(debiti)
sum(debiti$deb_res_immobili) + sum(debiti$deb_res_beni_cons) + sum(debiti$deb_res_professione) + sum(debiti$deb_carte_credito) + sum(debiti$deb_scoperto_cc)
df <- replace(debiti, is.na(debiti), 0)
View(df)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
sum(debiti$deb_res_immobili) + sum(debiti$deb_res_beni_cons) + sum(debiti$deb_res_professione) + sum(debiti$deb_carte_credito) + sum(debiti$deb_scoperto_cc)
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_cons + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
sum(debiti$deb_res_immobili) + sum(debiti$deb_res_beni_cons) + sum(debiti$deb_res_professione) + sum(debiti$deb_carte_credito) + sum(debiti$deb_scoperto_cc)
sum(debiti$tot_debito)
print(paste("Debito totale famiglie italiane 2020: ", sum(debiti$tot_debito)))
ggplot(debiti) +
geom_histogram(aes(x = tot_debito))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie senza debiti:", nrow(debiti)/nrow(famiglie_con_debito * 100)))
print(paste("Percentuale di famiglie senza debiti:", nrow(famiglie_con_debito)/nrow(debito) * 100)))
print(paste("Percentuale di famiglie senza debiti:", nrow(famiglie_con_debito)/nrow(debito) * 100)))
print(paste("Percentuale di famiglie senza debiti:", nrow(famiglie_con_debito)/nrow(debito) * 100))
print(paste("Percentuale di famiglie senza debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie con debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
summary(famiglie_con_debito$tot_debito)
ggplot(famiglie_con_debito) +
geom_histogram(aes(x = tot_debito))
ggplot(famiglie_con_debito) +
geom_boxplot(aes(x = tot_debito))
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
View(carcom_per_debito)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
View(carcom_per_debito)
View(carcom_per_debito)
View(debiti_famiglia)
View(debiti_full)
head(debiti_full)
debiti_full %>% group_by(area_geografica) %>% summarize(tot_debito)
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom = read.csv("indagine_2020\carcom20.csv")
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom$classe_eta = as.factor(carcom$classe_eta)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom$status_lavoratore = as.factor(carcom$status_lavoratore)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom$qualifica_lavoratore = as.factor(carcom$qualifica_lavoratore)
carcom = carcom %>% rename("settore" = SETT)
carcom$settore = as.factor(carcom$settore)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom$area_geografica = as.factor(carcom$area_geografica)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom$regione_residenza = as.factor(carcom$regione_residenza)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom$ampiezza_comune = as.factor(carcom$ampiezza_comune)
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_cons + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
print(paste("Debito totale famiglie italiane 2020 nel campione: ", sum(debiti$tot_debito)))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie con debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
summary(famiglie_con_debito$tot_debito)
ggplot(famiglie_con_debito) +
geom_histogram(aes(x = tot_debito))
ggplot(debiti) +
geom_histogram(aes(x = tot_debito))
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
debiti_full %>% group_by(area_geografica) %>% summarize(tot_debito)
debiti_full %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito))
debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito)) %>% arrange(desc(mean))
debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito)) %>% arrange(desc(mean))
debiti_full %>% filter(tot_debito > 0) %>% group_by(ampiezza_comune) %>% summarize(mean = mean(tot_debito)) %>% arrange(desc(mean))
debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debiti_full %>% filter(tot_debito > 0) %>% group_by(ampiezza_comune) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
mod = lm(tot_debito ~ numero_componenti + area_geografica, data = debiti_full)
summary(mod)
plot(mod)
plot(mod)
plot(mod)
plot(mod)
ggplot(debito_full) +
geom_point(aes(x =numero_componenti, y = tot_debito), col = area_geografica)
ggplot(debiti_full) +
geom_point(aes(x =numero_componenti, y = tot_debito), col = area_geografica)
ggplot(debiti_full %> filter(tot_debito > 0)) +
ggplot(debiti_full %>% filter(tot_debito > 0)) +
geom_point(aes(x =numero_componenti, y = tot_debito))
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Economical-risk-project")
library(tidyverse)
tot_fam_NO_PFIMM = sum(debiti$deb_res_immobili == 0)
cat('Il totale delle households senza PFIMM è: ', tot_fam_NO_PFIMM, '\n')
tot_fam_PFIMM = sum(debiti$deb_res_immobili > 0)
cat('Il totale delle households con PFIMM è: ', tot_fam_PFIMM, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per acquisto/ristrutturazione immobili è: ', (tot_fam_PFIMM/(tot_fam_NO_PFIMM+tot_fam_PFIMM))*100,'%', '\n')
pfimm = debiti %>% select(deb_res_immobili) %>% filter(deb_res_immobili != 0)
summary(pfimm)
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili)) +geom_histogram(bins = 60) + geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') + geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = mean)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Media del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_area_geografica = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
pfimm_area_geografica
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfimm_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
scale_x_discrete(labels = etichette_aree)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
tot_fam_NO_PFAZ = sum(debiti$deb_res_professione == 0)
cat('Il totale delle households senza PFAZ è:', tot_fam_NO_PFAZ, '\n')
tot_fam_PFAZ = sum(debiti$deb_res_professione > 0)
cat('Il totale delle households con PFAZ è:', tot_fam_PFAZ, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per motivi professionali è:', (tot_fam_PFAZ/(tot_fam_NO_PFAZ+tot_fam_PFAZ))*100,'%', '\n')
pfaz = debiti %>% select(deb_res_professione) %>% filter(deb_res_professione != 0)
summary(pfaz)
library(ggplot2)
ggplot(pfaz, aes(x = deb_res_professione)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = median(pfaz$deb_res_professione), color = 'red') +
geom_vline(xintercept = mean(pfaz$deb_res_professione), color = 'green') +
scale_x_log10()
carcom_pfaz = carcom %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
carcom_pfaz = distinct(carcom_pfaz)
head(carcom_pfaz)
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
pfaz_status = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(status_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette = c('1 - Employee', '2 - Self-employed', '3 - Non-Professional')
colori = c('darkorange', 'darkred', 'darkblue')
ggplot(pfaz_status, aes(x = status_lavoratore, y = mean)) +
geom_bar(stat = 'identity', fill = colori) +
scale_x_discrete(labels = etichette)
pfaz_qual = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(qualifica_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange() %>% mutate('Qualifica' = c('operaio', 'impiegato', 'dirigente', 'imprenditore/libero professionista', 'altro autonomo', 'pensionato', 'altro non occupato')) %>% select(Qualifica, everything())
colori = c('lightgreen', 'lightblue', 'lightpink', 'yellow', 'darkorange', 'red', 'darkblue')
pie(pfaz_qual$mean, labels = pfaz_qual$Qualifica, col = colori)
pfaz_sett = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(settore)%>% mutate(Settore = case_when(
settore == 1 ~ "Agricoltura",
settore == 2 ~ "Industria",
settore == 3 ~ "Servizi Pubblici",
settore == 4 ~ "Altri settori",
settore == 5 ~ "Nessun settore")) %>% select(Settore, everything())
pfaz_sett_summarize = pfaz_sett %>% filter(deb_res_professione > 0) %>% group_by(settore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
ggplot(pfaz_sett, aes(x = Settore, y = deb_res_professione)) +
geom_boxplot() +
scale_y_log10()
pfaz_area_geografica = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfaz_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightyellow", high = "darkorange") +
scale_x_discrete(labels = etichette_aree)
debiti$deb_carte_credito <- replace(debiti$deb_carte_credito, is.na(debiti$deb_carte_credito), 0)
tot_fam_NO_PFCARTE = sum(debiti$deb_carte_credito == 0)
cat('Il totale di household senza PFCARTE è: ', tot_fam_NO_PFCARTE, '\n')
tot_fam_PFCARTE = sum(debiti$deb_carte_credito > 0)
cat('Il totale di household con PFCARTE è: ', tot_fam_PFCARTE, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCARTE/(tot_fam_NO_PFCARTE + tot_fam_PFCARTE))*100,'%', '\n')
debiti$deb_scoperto_cc <- replace(debiti$deb_scoperto_cc, is.na(debiti$deb_scoperto_cc), 0)
tot_fam_NO_PFCC = sum(debiti$deb_scoperto_cc == 0)
cat('Il totale di household senza PFCC è: ', tot_fam_NO_PFCC, '\n')
tot_fam_PFCC = sum(debiti$deb_scoperto_cc > 0)
cat('Il totale di household con PFCC è: ', tot_fam_PFCC, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCC/(tot_fam_NO_PFCC + tot_fam_PFCC))*100,'%', '\n')
deb_scoperto = debiti %>% filter(deb_scoperto_cc > 0)
ggplot(deb_scoperto, aes(x = deb_scoperto_cc)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red')
tot_fam_NO_PFIMM = sum(debiti$deb_res_immobili == 0)
cat('Il totale delle households senza PFIMM è: ', tot_fam_NO_PFIMM, '\n')
tot_fam_PFIMM = sum(debiti$deb_res_immobili > 0)
cat('Il totale delle households con PFIMM è: ', tot_fam_PFIMM, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per acquisto/ristrutturazione immobili è: ', (tot_fam_PFIMM/(tot_fam_NO_PFIMM+tot_fam_PFIMM))*100,'%', '\n')
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili, y = ..density..)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili, y = ..density..)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = median)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Media del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = mean)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Media del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = median)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Mediana del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
tot_fam_NO_PFAZ = sum(debiti$deb_res_professione == 0)
cat('Il totale delle households senza PFAZ è:', tot_fam_NO_PFAZ, '\n')
tot_fam_PFAZ = sum(debiti$deb_res_professione > 0)
cat('Il totale delle households con PFAZ è:', tot_fam_PFAZ, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per motivi professionali è:', (tot_fam_PFAZ/(tot_fam_NO_PFAZ+tot_fam_PFAZ))*100,'%', '\n')
ggplot(pfaz) +
stat_qq() +
stat_qq_line()
ggplot(pfaz, sample(debiti_pfaz)) +
stat_qq() +
stat_qq_line()
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
ggplot(pfaz, aes(sample = debiti_professione)) +
stat_qq() +
stat_qq_line()
library(ggplot2)
ggplot(pfaz, aes(x = deb_res_professione)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = median(pfaz$deb_res_professione), color = 'red') +
geom_vline(xintercept = mean(pfaz$deb_res_professione), color = 'green') +
scale_x_log10()
ggplot(data = (debiti_full $>$ filter(debiti_professione > 0)), aes(sample = debiti_professione)) +
ggplot(data = (debiti_full %>% filter(debiti_professione > 0)), aes(sample = debiti_professione)) +
stat_qq() +
stat_qq_line()
carcom_pfaz = carcom %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
carcom_pfaz = distinct(carcom_pfaz)
head(carcom_pfaz)
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
pfaz_status = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(status_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette = c('1 - Employee', '2 - Self-employed', '3 - Non-Professional')
colori = c('darkorange', 'darkred', 'darkblue')
ggplot(pfaz_status, aes(x = status_lavoratore, y = mean)) +
geom_bar(stat = 'identity', fill = colori) +
scale_x_discrete(labels = etichette)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
debiti_per_ragione =  debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
# Specify the path where you want to save the CSV file
file_path <- "debito_residuo_per_regione"
# Export the DataFrame to a CSV file
write.csv(data, file = file_path, row.names = TRUE)
# Export the DataFrame to a CSV file
write.csv(debiti_per_regione, file = file_path, row.names = TRUE)
# Export the DataFrame to a CSV file
write.csv(debiti_per_regione, file = file_path, row.names = TRUE)
debiti_per_regione =  debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
# Export the DataFrame to a CSV file
write.csv(debiti_per_regione, file = file_path, row.names = TRUE)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
ggplot(famiglie_con_debito) +
geom_histogram(aes(x = tot_debito))
ggplot(debiti) +
geom_histogram(aes(x = tot_debito))
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_area_geografica = debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_area_geografica
# Specify the path where you want to save the CSV file
file_path <- "debito_residuo_per_area_geografica.csv"
# Export the DataFrame to a CSV file
write.csv(debito_area_geografica, file = file_path, row.names = TRUE)
debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_per_regione = debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
file_path <- "debito_residuo_per_regione.csv"
# Export the DataFrame to a CSV file
write.csv(debito_per_regione, file = file_path, row.names = TRUE)
debito_per_regione = debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_per_regione
file_path <- "debito_residuo_per_regione.csv"
# Export the DataFrame to a CSV file
write.csv(debito_per_regione, file = file_path, row.names = TRUE)
debiti_full %>% filter(tot_debito > 0) %>% group_by(ampiezza_comune) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
setwd("~/Desktop/Economical-risk-project")
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
setwd("~/Desktop/Economical-risk-project")
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom = read.csv("indagine_2020\carcom20.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Economical-risk-project")
# Qui dovete mettere il vostro path
# setwd("~\Desktop\Economical-risk-project")
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom = read.csv("indagine_2020\carcom20.csv")
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
View(carcom)
setwd("~/Desktop/Economical-risk-project")
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = read.csv("indagine_2020/carcom20.csv", sep = ";")
debiti =  read.csv("indagine_2020/debiti20.csv", sep = ";")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv", sep = ";")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv", sep = ";")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv", sep = ";")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv", sep = ";")
View(carcom)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom$classe_eta = as.factor(carcom$classe_eta)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom$status_lavoratore = as.factor(carcom$status_lavoratore)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom$qualifica_lavoratore = as.factor(carcom$qualifica_lavoratore)
carcom = carcom %>% rename("settore" = SETT)
carcom$settore = as.factor(carcom$settore)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom$area_geografica = as.factor(carcom$area_geografica)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom$regione_residenza = as.factor(carcom$regione_residenza)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom$ampiezza_comune = as.factor(carcom$ampiezza_comune)
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Economical-risk-project")
# Qui dovete mettere il vostro path
# setwd("~\Desktop\Economical-risk-project")
library(tidyverse)
carcom = read.csv("indagine_2020/carcom20.csv", sep = ";")
debiti =  read.csv("indagine_2020/debiti20.csv", sep = ";")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv", sep = ";")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv", sep = ";")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv", sep = ";")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv", sep = ";")
carcom = read.csv("indagine_2020\carcom20.csv")
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
View(debiti)
