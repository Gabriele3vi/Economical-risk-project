knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Economical-risk-project")
library('tidyverse')
library('dplyr')
carcom = read.csv("carcom20.csv", sep = ';')
debiti =  read.csv("debiti20.csv", sep = ';')
# Carico gli allegati
debiti_residenza = read.csv("alld2_res.csv", sep = ';')
debiti_professione = read.csv("alld2_prof.csv", sep = ';')
debiti_famiglia = read.csv("alld2_fam.csv", sep = ';')
debiti_altri_immobili = read.csv("alld2_aimm.csv", sep = ';')
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom$classe_eta = as.factor(carcom$classe_eta)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom$status_lavoratore = as.factor(carcom$status_lavoratore)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom$qualifica_lavoratore = as.factor(carcom$qualifica_lavoratore)
carcom = carcom %>% rename("settore" = SETT)
carcom$settore = as.factor(carcom$settore)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom$area_geografica = as.factor(carcom$area_geografica)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom$regione_residenza = as.factor(carcom$regione_residenza)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom$ampiezza_comune = as.factor(carcom$ampiezza_comune)
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
debiti$deb_scoperto_cc = as.numeric(debiti$deb_scoperto_cc)
debiti$deb_carte_credito = as.numeric(debiti$deb_carte_credito)
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
debiti
print(paste("Debito totale famiglie italiane 2020 nel campione: ", sum(debiti$tot_debito)))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie con debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
tot_fam_NO_PFIMM = sum(debiti$deb_res_immobili == 0)
cat('Il totale delle households senza PFIMM è: ', tot_fam_NO_PFIMM, '\n')
tot_fam_PFIMM = sum(debiti$deb_res_immobili > 0)
cat('Il totale delle households con PFIMM è: ', tot_fam_PFIMM, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per acquisto/ristrutturazione immobili è: ', (tot_fam_PFIMM/(tot_fam_NO_PFIMM+tot_fam_PFIMM))*100,'%', '\n')
pfimm = debiti %>% select(deb_res_immobili) %>% filter(deb_res_immobili != 0)
summary(pfimm)
pfimm
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili)) +geom_histogram(bins = 60) + geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') + geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
# UTILE?
ggplot(pfimm, aes(x = pfimm$deb_res_immobili)) +
geom_boxplot()
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = mean)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Media del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_area_geografica = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
pfimm_area_geografica
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfimm_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
scale_x_discrete(labels = etichette_aree)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
tot_fam_NO_PFAZ = sum(debiti$deb_res_professione == 0)
cat('Il totale delle households senza PFAZ è:', tot_fam_NO_PFAZ, '\n')
tot_fam_PFAZ = sum(debiti$deb_res_professione > 0)
cat('Il totale delle households con PFAZ è:', tot_fam_PFAZ, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per motivi professionali è:', (tot_fam_PFAZ/(tot_fam_NO_PFAZ+tot_fam_PFAZ))*100,'%', '\n')
pfaz = debiti %>% select(deb_res_professione) %>% filter(deb_res_professione != 0)
summary(pfaz)
pfaz
library(ggplot2)
ggplot(pfaz, aes(x = deb_res_professione)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = median(pfaz$deb_res_professione), color = 'red') +
geom_vline(xintercept = mean(pfaz$deb_res_professione), color = 'green') +
scale_x_log10()
carcom_pfaz = carcom %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
carcom_pfaz = distinct(carcom_pfaz)
head(carcom_pfaz)
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
pfaz_status = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(status_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette = c('1 - Employee', '2 - Self-employed', '3 - Non-Professional')
colori = c('darkorange', 'darkred', 'darkblue')
ggplot(pfaz_status, aes(x = status_lavoratore, y = mean)) +
geom_bar(stat = 'identity', fill = colori) +
scale_x_discrete(labels = etichette)
pfaz_qual = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(qualifica_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange() %>% mutate('Qualifica' = c('operaio', 'impiegato', 'dirigente', 'imprenditore/libero professionista', 'altro autonomo', 'pensionato', 'altro non occupato')) %>% select(Qualifica, everything())
colori = c('lightgreen', 'lightblue', 'lightpink', 'yellow', 'darkorange', 'red', 'darkblue')
pie(pfaz_qual$mean, labels = pfaz_qual$Qualifica, col = colori)
pfaz_sett = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(settore)%>% mutate(Settore = case_when(
settore == 1 ~ "Agricoltura",
settore == 2 ~ "Industria",
settore == 3 ~ "Servizi Pubblici",
settore == 4 ~ "Altri settori",
settore == 5 ~ "Nessun settore")) %>% select(Settore, everything())
pfaz_sett_summarize = pfaz_sett %>% filter(deb_res_professione > 0) %>% group_by(settore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
ggplot(pfaz_sett, aes(x = Settore, y = deb_res_professione)) +
geom_boxplot() +
scale_y_log10()
pfaz_area_geografica = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfaz_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightyellow", high = "darkorange") +
scale_x_discrete(labels = etichette_aree)
debiti$deb_carte_credito <- replace(debiti$deb_carte_credito, is.na(debiti$deb_carte_credito), 0)
tot_fam_NO_PFCARTE = sum(debiti$deb_carte_credito == 0)
cat('Il totale di household senza PFCARTE è: ', tot_fam_NO_PFCARTE, '\n')
tot_fam_PFCARTE = sum(debiti$deb_carte_credito > 0)
cat('Il totale di household con PFCARTE è: ', tot_fam_PFCARTE, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCARTE/(tot_fam_NO_PFCARTE + tot_fam_PFCARTE))*100,'%', '\n')
debiti$deb_scoperto_cc <- replace(debiti$deb_scoperto_cc, is.na(debiti$deb_scoperto_cc), 0)
tot_fam_NO_PFCC = sum(debiti$deb_scoperto_cc == 0)
cat('Il totale di household senza PFCC è: ', tot_fam_NO_PFCC, '\n')
tot_fam_PFCC = sum(debiti$deb_scoperto_cc > 0)
cat('Il totale di household con PFCC è: ', tot_fam_PFCC, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCC/(tot_fam_NO_PFCC + tot_fam_PFCC))*100,'%', '\n')
deb_scoperto = debiti %>% filter(deb_scoperto_cc > 0)
ggplot(deb_scoperto, aes(x = deb_scoperto_cc)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red')
str(debiti)
debiti$tot_rate_pagate
debiti
debiti %>% select(tot_rate_pagate, tot_debito)
debiti$tot_rate_pagate[is.na(debiti$tot_rate_pagate)] = 0
debiti %>% filter(tot_rate_pagate = 'NaN')
debiti %>% filter(tot_rate_pagate == 'NaN')
debiti %>% filter(tot_rate_pagate == 0)
debiti$tot_rate_pagate[is.nan(debiti$tot_rate_pagate)]
debiti %>% select(tot_rate_pagate) %>% filter(tot_rate_pagate > 0) %>% summarize(mean = mean(tot_rate_pagate))
debiti %>% select(nquest, tot_rate_pagate) %>% filter(tot_rate_pagate > 0) %>% summarize(mean = mean(tot_rate_pagate))
debiti %>% select(NQUEST, tot_rate_pagate) %>% filter(tot_rate_pagate > 0) %>% summarize(mean = mean(tot_rate_pagate))
debiti %>% select(tot_rate_pagate) %>% filter(tot_rate_pagate > 0) %>% summarize(mean = mean(tot_rate_pagate))
tot_rate_pagate1 = debiti %>% select(tot_rate_pagate) %>% filter(tot_rate_pagate > 0)
summary(tot_rate_pagate1)
perc_rate_pagate = (debiti$tot_rate_pagate[tot_rate_pagate > 0]) / ((debiti$tot_rate_pagate[tot_rate_pagate > 0]) + (debiti$tot_rate_pagate[tot_rate_pagate == 0]))
perc_rate_pagate = (debiti$tot_rate_pagate[debiti$tot_rate_pagate > 0]) / ((debiti$tot_rate_pagate[debiti$tot_rate_pagate > 0]) + (debiti$tot_rate_pagate[debiti$tot_rate_pagate == 0]))
length(debiti$tot_rate_pagate)
debiti$tot_rate_pagate[is.na(debiti$tot_rate_pagate)] = 0
no_rate = debiti$tot_rate_pagate[debiti$tot_rate_pagate == 0]
si_rate = debiti$tot_rate_pagate[debiti$tot_rate_pagate > 0]
perc_rate_pagate = si_rate/(length(debiti$tot_rate_pagate))
perc_rate_pagate
si_rate = debiti$tot_rate_pagate[tot_rate_pagate > 0]
perc_rate_pagate = length(si_rate)/(length(debiti$tot_rate_pagate))
perc_rate_pagate
perc_rate_pagate = length(si_rate)/(length(debiti$tot_rate_pagate))*100
perc_rate_pagate
cat(perc_rate_pagate, '%')
cat('Il totale di household che nel 2020 hanno pagato rate è: ',perc_rate_pagate, '%')
cat('Il totale di households che nel 2020 hanno pagato rate è: ',perc_rate_pagate, '%')
cat('Il totale di households che nel 2020 hanno pagato rate è:',perc_rate_pagate, '%')
summary(si_rate)
tot_rate_pagate1
summary(tot_rate_pagate1)
summary(tot_rate_pagate1)
summary(si_rate)
str(si_rate)
si_rate
summary(si_rate)
hist(si_rate)
ggplot(data = data.frame(si_rate = si_rate), aes(x = si_rate)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Distribuzione di si_rate", x = "Valori di si_rate", y = "Frequenza")
ggplot(data = data.frame(si_rate = si_rate), aes(x = si_rate)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Distribuzione di si_rate", x = "Valori di si_rate", y = "Frequenza") +
scale_x_log10()
rate_pagate = debiti %>% filter(tot_rate_pagate > 0)
rate_pagate
ggplot(rate_pagate, aes(x = tot_rate_pagate))
ggplot(rate_pagate, aes(x = tot_rate_pagate)) +
geom_histogram()
ggplot(rate_pagate, aes(x = tot_rate_pagate)) +
geom_histogram() +
scale_x_log10()
ggplot(rate_pagate, aes(x = tot_rate_pagate)) +
geom_histogram(col = 'purple') +
scale_x_log10()
ggplot(rate_pagate, aes(x = tot_rate_pagate)) +
geom_histogram(col = 'purple', fill = 'lightpink') +
scale_x_log10()
ggplot(rate_pagate, aes(x = tot_rate_pagate, y = ..density..)) +
geom_histogram(col = 'purple', fill = 'lightpink') +
scale_x_log10() +
labs(title = 'Distribuzione rate pagate nel 2020', x = '')
ggplot(rate_pagate, aes(x = tot_rate_pagate, y = ..density..)) +
geom_histogram(col = 'purple', fill = 'lightpink') +
scale_x_log10() +
labs(title = 'Distribuzione rate pagate nel 2020', x = 'rate pagate', y = 'density')
ggplot(deb_scoperto, aes(x = deb_scoperto_cc, y = ..density..)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red')
ggplot(deb_scoperto, aes(x = deb_scoperto_cc, y = ..density..)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red') +
scale_y_log10()
ggplot(deb_scoperto, aes(x = deb_scoperto_cc, y = ..density..)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red')
perc_res = rate_pagate %>% select(tot_rate_res, tot_rate_pagate) %>% summarize(percentuale = (tot_rate_res/tot_rate_pagate)*100)
perc_res = rate_pagate %>% select(tot_rate_res, tot_rate_pagate) %>% summarize(percentuale = (sum(tot_rate_res)/sum(tot_rate_pagate)*100)
perc_res = rate_pagate %>% select(tot_rate_res, tot_rate_pagate) %>% summarize(percentuale = (sum(tot_rate_res)/sum(tot_rate_pagate)*100))
perc_res = rate_pagate %>% select(tot_rate_res, tot_rate_pagate) %>% summarize(percentuale = sum(tot_rate_res)/sum(tot_rate_pagate)*100))
perc_res = rate_pagate %>% select(tot_rate_res, tot_rate_pagate) %>% summarize(percentuale = sum(tot_rate_res)/sum(tot_rate_pagate)*100)
perc_res
percentuali = rate_pagate %>% select(tot_rate_res, tot_rate_altri_immobili, tot_rate_fam, tot_rate_professione, tot_rate_pagate) %>% mutate(Perc_res = sum(tot_rate_res)/sum(tot_rate_pagate1)*100)
percentuali
percentuali = rate_pagate %>% mutate(Perc_res = sum(tot_rate_res)/sum(tot_rate_pagate1)*100)
percentuali
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res)
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0)
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = sum(tot_rate_pagate) / sum(tot_rate_res))
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = tot_rate_pagate / tot_rate_res)
perc_re
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = tot_rate_pagate / tot_rate_res)*100)
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = (tot_rate_pagate / tot_rate_res)*100)
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_pagate / tot_rate_res)*100), 1)
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = (round((tot_rate_pagate / tot_rate_res)*100), 1))
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_pagate / tot_rate_res) * 100, 1))
perc_res
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1))
perc_res
perc_aimm = debiti %>% select(tot_rate_pagate, tot_rate_altri_immobili) %>% filter(tot_rate_altri_immobili > 0) %>% mutate(Perc_res = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
perc_aimm = debiti %>% select(tot_rate_pagate, tot_rate_altri_immobili) %>% filter(tot_rate_altri_immobili > 0) %>% mutate(Perc_res = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
perc_fam = debiti %>% select(tot_rate_pagate, tot_rate_fam) %>% filter(tot_rate_fam > 0) %>% mutate(Perc_res = round((tot_rate_fam / tot_rate_pagate) * 100, 1))
perc_prof = debiti %>% select(tot_rate_pagate, tot_rate_professione) %>% filter(tot_rate_professione > 0) %>% mutate(Perc_res = round((tot_rate_professione / tot_rate_pagate) * 100, 1))
perc_res = debiti %>% select(tot_rate_pagate, tot_rate_res) %>% filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1))
perc_aimm = debiti %>% select(tot_rate_pagate, tot_rate_altri_immobili) %>% filter(tot_rate_altri_immobili > 0) %>% mutate(Perc_res = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
perc_fam = debiti %>% select(tot_rate_pagate, tot_rate_fam) %>% filter(tot_rate_fam > 0) %>% mutate(Perc_res = round((tot_rate_fam / tot_rate_pagate) * 100, 1))
perc_prof = debiti %>% select(tot_rate_pagate, tot_rate_professione) %>% filter(tot_rate_professione > 0) %>% mutate(Perc_res = round((tot_rate_professione / tot_rate_pagate) * 100, 1))
perc_res
perc_prof
perc_res = debiti %>%  filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1))
perc_res
perc_res = debiti %>%  filter(tot_rate_res > 0) %>% mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1))
perc_aimm = debiti %>% filter(tot_rate_altri_immobili > 0) %>% mutate(Perc_res = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
perc_fam = debiti %>% filter(tot_rate_fam > 0) %>% mutate(Perc_res = round((tot_rate_fam / tot_rate_pagate) * 100, 1))
perc_prof = debiti %>% filter(tot_rate_professione > 0) %>% mutate(Perc_res = round((tot_rate_professione / tot_rate_pagate) * 100, 1))
dataset_percentuali = merge(perc_res, perc_aimm, perc_fam, perc_prof, on = 'NQUEST')
dataset_percentuali = merge(perc_res, perc_aimm, perc_fam, perc_prof, by= 'NQUEST')
dataset_percentuali <- merge(dataset_percentuali, perc_prof, by = 'NQUEST')
dataset_percentuali <- merge(perc_res, perc_aimm, by = 'NQUEST')
dataset_percentuali <- merge(dataset_percentuali, perc_fam, by = 'NQUEST')
dataset_percentuali <- merge(dataset_percentuali, perc_prof, by = 'NQUEST')
debiti <- debiti %>%
mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1),
Perc_fam = round((tot_rate_fam / tot_rate_pagate) * 100, 1),
Perc_prof = round((tot_rate_professione / tot_rate_pagate) * 100, 1),
Perc_aimm = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
percentuali_dataset <- debiti %>%
mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1),
Perc_fam = round((tot_rate_fam / tot_rate_pagate) * 100, 1),
Perc_prof = round((tot_rate_professione / tot_rate_pagate) * 100, 1),
Perc_aimm = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
percentuali_dataset = percentuali_dataset %>% select(NQUEST, tot_rate_pagate, tot_rate_res, tot_rate_fam, tot_rate_professione, tot_rate_altri_immobili, Perc_res, Perc_fam, Perc_prof, Perc_aimm)
percentuali dataset
percentuali_dataset
percentuali_dataset <- debiti %>% filter(tot_rate_pagate >0) %>%
mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1),
Perc_fam = round((tot_rate_fam / tot_rate_pagate) * 100, 1),
Perc_prof = round((tot_rate_professione / tot_rate_pagate) * 100, 1),
Perc_aimm = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
percentuali_dataset = percentuali_dataset %>% select(NQUEST, tot_rate_pagate, tot_rate_res, tot_rate_fam, tot_rate_professione, tot_rate_altri_immobili, Perc_res, Perc_fam, Perc_prof, Perc_aimm)
percentuali_dataset
categoria = c(percentuali_dataset$Perc_res, percentuali_dataset$Perc_fam, percentuali_dataset$Perc_prof, percentuali_dataset$Perc_aimm)
valori = c(sum(percentuali_dataset$Perc_res), sum(percentuali_dataset$Perc_fam), sum(percentuali_dataset$Perc_prof), sum(percentuali_dataset$Perc_aimm))
ggplot(percentuali_dataset, aes(x = categoria, y = valori)) +
geom_histogram(stat = 'identity')
valori
categoria = c(percentuali_dataset$Perc_res, percentuali_dataset$Perc_fam, percentuali_dataset$Perc_prof, percentuali_dataset$Perc_aimm)
categoria
categoria = c(Perc_res, Perc_fam, Perc_prof, Perc_aimm)
categoria = c(Perc_res, Perc_fam, Perc_prof, Perc_aimm)
grafico_torta <- ggplot(percentuali_dataset, aes(x = "", y = c(sum(Perc_res), sum(Perc_fam), sum(Perc_prof), sum(Perc_aimm)), fill = c("Res", "Fam", "Prof", "Aimm"))) +
geom_bar(stat = "identity")
ggplot(percentuali_dataset, aes(x = "", y = c(sum(Perc_res), sum(Perc_fam), sum(Perc_prof), sum(Perc_aimm)), fill = c("Res", "Fam", "Prof", "Aimm"))) +
geom_bar(stat = "identity")
valore_res = sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0])
valore_res
valore_res = sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])
valore_res = (sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100
valore_res
valore_fam = (sum(percentuali_dataset$tot_rate_fam[percentuali_dataset$tot_rate_fam > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100
valore_prof = (sum(percentuali_dataset$tot_rate_professione[percentuali_dataset$tot_rate_professione > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100
valore_aimm = (sum(percentuali_dataset$tot_rate_altri_immobili[percentuali_dataset$tot_rate_altri_immobili > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100
categoria = c('Res', 'Fam', 'Aimm', 'Prof')
valori = c(valore_res, valore_fam, valore_aimm, valore_prof)
dataframe = data.frame(categoria, valori)
dataframe
valore_res = round(sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100), 1)
valore_res = round(sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 1)
valore_res = round((sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 1)
# andiamo a sommare i valori e vediamo com'è la scomposizione generale del totale rate pagate nel 2020
valore_res = round((sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_fam = round((sum(percentuali_dataset$tot_rate_fam[percentuali_dataset$tot_rate_fam > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_prof = round((sum(percentuali_dataset$tot_rate_professione[percentuali_dataset$tot_rate_professione > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_aimm = round((sum(percentuali_dataset$tot_rate_altri_immobili[percentuali_dataset$tot_rate_altri_immobili > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
categoria = c('Res', 'Fam', 'Aimm', 'Prof')
valori = c(valore_res, valore_fam, valore_aimm, valore_prof)
dataframe = data.frame(categoria, valori)
dataframe
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar()
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity')
geom_bar(stat = 'identity', fill = rainbow(length(dataframe$categoria))
ggplot(dataframe, aes(x = categoria, y = valori)) +
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = rainbow(length(dataframe$categoria)))
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = topo.colors(length(dataframe$categoria)))
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = terrain.colors(length(dataframe$categoria)))
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = viridis(length(dataframe$categoria)))
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = heat.colors(length(dataframe$categoria)))
str(carcom)
carcom_rate_pagate = carcom %>% select(NQUEST, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica)
merge(debiti, carcom_rate_pagate, by = NQUEST)
merge(debiti, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte = merge(debiti, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte = rate_piu_alte %>% select(NQUEST, numero_componenti, status_lavoratore,qualifica_lavoratore, area_geografica, tot_rate_pagate)
rate_piu_alte
rate_piu_alte = rate_piu_alte %>% select(NQUEST, numero_componenti, status_lavoratore,qualifica_lavoratore, area_geografica, tot_rate_pagate, perc_aimm, perc_fam, perc_prof, perc_res) %>% filter(tot_rate_pagate > 0)
rate_piu_alte = rate_piu_alte %>%
select(NQUEST, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica, tot_rate_pagate,
all_of(c("perc_aimm", "perc_fam", "perc_prof", "perc_res"))) %>%
filter(tot_rate_pagate > 0)
str(rate_piu_alte)
rate_piu_alte = merge(rate_pagate, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica )
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc = TRUE)
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc = TRUE)
rate_piu_alte
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc = TRUE)
rate_piu_alte
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc(tot_rate_pagate))
rate_piu_alte
carcom_per_debito = distinct(carcom_per_debito)
carcom_rate_pagate = carcom %>% select(NQUEST, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica)
carcom_per_debito = distinct(carcom_per_debito)
rate_piu_alte = merge(rate_pagate, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc(tot_rate_pagate))
rate_piu_alte
carcom_rate_pagate = distinct(carcom_rate_pagate)
rate_piu_alte = merge(rate_pagate, carcom_rate_pagate, by = 'NQUEST')
carcom_rate_pagate = carcom %>% select(NQUEST, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica)
carcom_rate_pagate = distinct(carcom_rate_pagate)
rate_piu_alte = merge(rate_pagate, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc(tot_rate_pagate))
rate_piu_alte
rate_pagate = distinct(rate_pagate)
rate_piu_alte = merge(rate_pagate, carcom_rate_pagate, by = 'NQUEST')
rate_piu_alte = rate_piu_alte %>% select(NQUEST, tot_rate_pagate, numero_componenti, status_lavoratore, qualifica_lavoratore, area_geografica ) %>% arrange(desc(tot_rate_pagate))
rate_piu_alte
rate_pagate
duplicated(rate_pagate$NQUEST)
Anyduplicated(rate_pagate$NQUEST)
anyDuplicated(rate_pagate$NQUEST)
anyDuplicated(carcom_rate_pagate$NQUEST)
carcom_rate_pagate = distinct(carcom_rate_pagate)
anyDuplicated(carcom_rate_pagate$NQUEST)
carcom_rate_pagate
carcom_rate_pagate1 = distinct(carcom_rate_pagate)
anyDuplicated(carcom_rate_pagate1$NQUEST)
carcom_per_debito = carcom %>% select(NQUEST,ETA, numero_componenti, area_geografica, status_lavoratore, qualifica_lavoratore)
carcom_per_rate = carcom %>% select(NQUEST,ETA, numero_componenti, area_geografica, status_lavoratore, qualifica_lavoratore)
# ora elimino i duplicati dal dataframe
carcom_per_rate = distinct(carcom_per_rate)
anyDuplicated(carcom_per_rate$NQUEST)
knitr::opts_chunk$set(echo = TRUE)
# per prima cosa andiamo a sostituire i NaN con 0 e per calcolare quante persone hanno pagato delle rate nel 2020, facciamo il rapporto tra quelli che avevano tot_rate_pagate > 0 / (tot_rate_pagate = 0 + tot_rate_pagate != 0)
debiti$tot_rate_pagate[is.na(debiti$tot_rate_pagate)] = 0
si_rate = debiti$tot_rate_pagate[debiti$tot_rate_pagate > 0]
perc_rate_pagate = length(si_rate)/(length(debiti$tot_rate_pagate))*100
cat('Il totale di households che nel 2020 hanno pagato rate è:',perc_rate_pagate, '%')
