debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti$RATAEB_RES = debiti$RATADEB_RES*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti$RATAEB_AIMM = debiti$RATADEB_AIMM*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti$RATAEB_FAM = debiti$RATADEB_FAM*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti$RATAEB_PROF = debiti$RATADEB_PROF*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti$PFIMM = debiti$PFIMM*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti$PFCONS = debiti$PFCONS*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti$TDEBITC = debiti$TDEBITC*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti$TDEBITD = debiti$TDEBITD*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti$TDEBITE = debiti$TDEBITE*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti$TDEBITF = debiti$TDEBITF*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti$TDEBITG = debiti$TDEBITG*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti$PFAZ = debiti$PFAZ*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti$PFCARTE = debiti$PFCARTE*debiti$PESOFIT
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti$PFCC = debiti$PFCC*debiti$PESOFIT
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti$PFCOLL = debiti$PFCOLL*debiti$PESOFIT
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti$PFNOCOLL = debiti$PFNOCOLL*debiti$PESOFIT
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
regions_data = read.csv("codici_regioni_prov_comuni.csv", sep=";")
regions_data = regions_data %>% select(Codice.Regione, Denominazione.Regione, Ripartizione.geografica, Codice.Ripartizione.Geografica)
regions_data = distinct(regions_data)
regions_data = regions_data %>% rename("regione_residenza" = "Codice.Regione")
regions_data
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
print(paste("Debito totale famiglie italiane 2020 nel campione: ", sum(debiti$tot_debito)))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie con debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
summary(famiglie_con_debito$tot_debito)
ggplot(famiglie_con_debito) +
geom_histogram(aes(x = tot_debito))
# Questo penso sia inutile
ggplot(famiglie_con_debito) +
geom_boxplot(aes(x = tot_debito))
ggplot(debiti) +
geom_histogram(aes(x = tot_debito))
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, NPERC, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
carcom_per_debito
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
debito_area_geografica = debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_area_geografica
# Specify the path where you want to save the CSV file
file_path <- "debito_residuo_per_area_geografica.csv"
# Export the DataFrame to a CSV file
write.csv(debito_area_geografica, file = file_path, row.names = TRUE)
debito_per_regione = debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_per_regione = merge(debito_per_regione, regions_data, by="regione_residenza")
ggplot(debito_per_regione) +
geom_bar(aes(x = reorder(Denominazione.Regione, +median), y = median, fill = Ripartizione.geografica), stat="identity") +
coord_flip() +
labs(x = "Regione", y = "Debito residuo mediano per regione")
debiti_full %>% filter(tot_debito > 0) %>% group_by(ampiezza_comune) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debiti_full = debiti_full %>% mutate(rapp_perc = NPERC/numero_componenti)
ggplot(debiti_full %>% filter(tot_debito > 0)) +
geom_point(aes(x=rapp_perc, y = tot_debito))
model = lm(tot_debito ~ rapp_perc, data = debiti_full %>% filter(tot_debito > 0))
summary(model)
con_deb = debiti_full %>% filter(tot_debito > 0)
con_deb = con_deb %>% mutate(perc_gar_real = deb_garanzie_reali/tot_debito)
con_deb = con_deb %>% mutate(perc_gar_non_real = 1-perc_gar_real)
con_deb %>% filter(NQUEST == 8788)
ggplot(con_deb) +
geom_histogram(aes(x = perc_gar_real))
summary(con_deb$perc_gar_real)
con_deb = con_deb %>% mutate(gar_real = ifelse(perc_gar_real > 0.75, 1, 0))
con_deb %>% group_by(gar_real) %>% summarize(count = n())
tipo = con_deb %>% select(NQUEST, gar_real)
hs_eta = carcom %>% group_by(NQUEST) %>% summarize(eta_media = mean(ETA))
con_deb = merge(con_deb, hs_eta, by="NQUEST")
ggplot(con_deb) +
geom_point(aes(x = eta_media, y = tot_debito)) +
scale_y_log10()
m1 = lm(tot_debito ~ eta_media, data = con_deb)
summary(m1)
ggplot(con_deb) +
geom_point(aes(x = eta_media, y = gar_real))
#Vediamo se a livello geografico c'è una qualche differenza  tra chi ah debiti con garanzie reali e chi no
perc_gar_real_reg = con_deb %>% group_by(regione_residenza) %>% summarize(perc_con_gar_real = sum(gar_real)/n()) %>% arrange(desc(perc_con_gar_real))
perc_gar_real_reg
perc_gar_real_reg = merge(perc_gar_real_reg, regions_data, by="regione_residenza")
perc_gar_real_reg
ggplot(perc_gar_real_reg) +
geom_bar(aes(x = reorder(Denominazione.Regione, +perc_con_gar_real), y = perc_con_gar_real, fill = Ripartizione.geografica), stat="identity") +
coord_flip() +
labs(x = "Regione", y = "% di debiti con garanzie reali sul totale ")
con_deb
tot_fam_NO_PFIMM = sum(debiti$deb_res_immobili == 0)
cat('Il totale delle households senza PFIMM è: ', tot_fam_NO_PFIMM, '\n')
tot_fam_PFIMM = sum(debiti$deb_res_immobili > 0)
cat('Il totale delle households con PFIMM è: ', tot_fam_PFIMM, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per acquisto/ristrutturazione immobili è: ', (tot_fam_PFIMM/(tot_fam_NO_PFIMM+tot_fam_PFIMM))*100,'%', '\n')
pfimm = debiti %>% select(deb_res_immobili) %>% filter(deb_res_immobili != 0)
summary(pfimm)
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili, y = ..density..)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
# UTILE?
ggplot(pfimm, aes(x = pfimm$deb_res_immobili)) +
geom_boxplot()
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
# Qui ci sta lasciare la mediana invece della media
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = median)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Mediana del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_area_geografica = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
pfimm_area_geografica
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfimm_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
scale_x_discrete(labels = etichette_aree)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
tot_fam_NO_PFAZ = sum(debiti$deb_res_professione == 0)
cat('Il totale delle households senza PFAZ è:', tot_fam_NO_PFAZ, '\n')
tot_fam_PFAZ = sum(debiti$deb_res_professione > 0)
cat('Il totale delle households con PFAZ è:', tot_fam_PFAZ, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per motivi professionali è:', (tot_fam_PFAZ/(tot_fam_NO_PFAZ+tot_fam_PFAZ))*100,'%', '\n')
pfaz = debiti %>% select(deb_res_professione) %>% filter(deb_res_professione != 0)
summary(pfaz)
library(ggplot2)
ggplot(pfaz, aes(x = deb_res_professione)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = median(pfaz$deb_res_professione), color = 'red') +
geom_vline(xintercept = mean(pfaz$deb_res_professione), color = 'green') +
scale_x_log10()
carcom_pfaz = carcom %>% filter(CFRED == 1) %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune, CFRED)
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune, CFRED)
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, PESOFIT, CFRED)
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, PESOFIT, CFRED)
carcom
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Economical-risk-project")
setwd("C:/Users/huawei/OneDrive/Documenti/DABS/ECONOMICS OF RISK/Economical-risk-project")
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, PESOFIT, CFRED)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom$classe_eta = as.factor(carcom$classe_eta)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom$status_lavoratore = as.factor(carcom$status_lavoratore)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom$qualifica_lavoratore = as.factor(carcom$qualifica_lavoratore)
carcom = carcom %>% rename("settore" = SETT)
carcom$settore = as.factor(carcom$settore)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom$area_geografica = as.factor(carcom$area_geografica)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom$regione_residenza = as.factor(carcom$regione_residenza)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom$ampiezza_comune = as.factor(carcom$ampiezza_comune)
carcom = read.csv("indagine_2020/carcom20.csv")
debiti =  read.csv("indagine_2020/debiti20.csv")
# Carico gli allegati
debiti_residenza = read.csv("indagine_2020/alld2_res.csv")
debiti_professione = read.csv("indagine_2020/alld2_prof.csv")
debiti_famiglia = read.csv("indagine_2020/alld2_fam.csv")
debiti_altri_immobili = read.csv("indagine_2020/alld2_aimm.csv")
carcom
carcom = carcom %>% select(NQUEST, nord, NCOMP, SEX, ANASC, ETA, CLETA5, PERL, PERC, NPERL, NPERC, Q, QUAL, SETT, AREA5, IREG, ACOM4C, PESOFIT, CFRED)
carcom = carcom %>% rename("classe_eta" = CLETA5)
carcom$classe_eta = as.factor(carcom$classe_eta)
carcom = carcom %>% rename("anno_nascita" = ANASC)
carcom = carcom %>% rename("numero_componenti" = NCOMP)
carcom = carcom %>% rename("status_lavoratore" = Q)
carcom$status_lavoratore = as.factor(carcom$status_lavoratore)
carcom = carcom %>% rename("qualifica_lavoratore" = QUAL)
carcom$qualifica_lavoratore = as.factor(carcom$qualifica_lavoratore)
carcom = carcom %>% rename("settore" = SETT)
carcom$settore = as.factor(carcom$settore)
carcom = carcom %>% rename("area_geografica" = AREA5)
carcom$area_geografica = as.factor(carcom$area_geografica)
carcom = carcom %>% rename("regione_residenza" = IREG)
carcom$regione_residenza = as.factor(carcom$regione_residenza)
carcom = carcom %>% rename("ampiezza_comune" = ACOM4C)
carcom$ampiezza_comune = as.factor(carcom$ampiezza_comune)
debiti = merge(debiti, carcom[, c("NQUEST", "PESOFIT")], by = "NQUEST", all.x = TRUE)
debiti$RATADEB = debiti$RATADEB*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_pagate" = RATADEB)
debiti$RATAEB_RES = debiti$RATADEB_RES*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_res" = RATADEB_RES)
debiti$RATAEB_AIMM = debiti$RATADEB_AIMM*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_altri_immobili" = RATADEB_AIMM)
debiti$RATAEB_FAM = debiti$RATADEB_FAM*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_fam" = RATADEB_FAM)
debiti$RATAEB_PROF = debiti$RATADEB_PROF*debiti$PESOFIT
debiti = debiti %>% rename("tot_rate_professione" = RATADEB_PROF)
debiti$PFIMM = debiti$PFIMM*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_immobili" = PFIMM)
debiti$PFCONS = debiti$PFCONS*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_consumo" = PFCONS)
debiti$TDEBITC = debiti$TDEBITC*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_mezzi_trasporto" = TDEBITC)
debiti$TDEBITD = debiti$TDEBITD*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_durevoli" = TDEBITD)
debiti$TDEBITE = debiti$TDEBITE*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_beni_non_durevoli" = TDEBITE)
debiti$TDEBITF = debiti$TDEBITF*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_altro" = TDEBITF)
debiti$TDEBITG = debiti$TDEBITG*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_istruzione" = TDEBITG)
debiti$PFAZ = debiti$PFAZ*debiti$PESOFIT
debiti = debiti %>% rename("deb_res_professione" = PFAZ)
debiti$PFCARTE = debiti$PFCARTE*debiti$PESOFIT
debiti = debiti %>% rename("deb_carte_credito" = PFCARTE)
debiti$PFCC = debiti$PFCC*debiti$PESOFIT
debiti = debiti %>% rename("deb_scoperto_cc" = PFCC)
debiti$PFCOLL = debiti$PFCOLL*debiti$PESOFIT
debiti = debiti %>% rename("deb_garanzie_reali" = PFCOLL)
debiti$PFNOCOLL = debiti$PFNOCOLL*debiti$PESOFIT
debiti = debiti %>% rename("deb_no_garanzie_reali" = PFNOCOLL)
# Setto a 0 i dati NA
debiti = replace(debiti, is.na(debiti), 0)
regions_data = read.csv("codici_regioni_prov_comuni.csv", sep=";")
regions_data = regions_data %>% select(Codice.Regione, Denominazione.Regione, Ripartizione.geografica, Codice.Ripartizione.Geografica)
regions_data = distinct(regions_data)
regions_data = regions_data %>% rename("regione_residenza" = "Codice.Regione")
regions_data
debiti = debiti %>% mutate(tot_debito = deb_res_immobili + deb_res_beni_consumo + deb_res_professione + deb_carte_credito + deb_scoperto_cc)
print(paste("Debito totale famiglie italiane 2020 nel campione: ", sum(debiti$tot_debito)))
famiglie_con_debito = debiti %>% filter(debiti$tot_debito > 0)
print(paste("Percentuale di famiglie con debiti:", nrow(famiglie_con_debito)/nrow(debiti) * 100))
summary(famiglie_con_debito$tot_debito)
ggplot(famiglie_con_debito) +
geom_histogram(aes(x = tot_debito))
# Questo penso sia inutile
ggplot(famiglie_con_debito) +
geom_boxplot(aes(x = tot_debito))
ggplot(debiti) +
geom_histogram(aes(x = tot_debito))
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, NPERC, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
carcom_per_debito
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
debito_area_geografica = debiti_full %>% filter(tot_debito > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_area_geografica
# Specify the path where you want to save the CSV file
file_path <- "debito_residuo_per_area_geografica.csv"
# Export the DataFrame to a CSV file
write.csv(debito_area_geografica, file = file_path, row.names = TRUE)
debito_per_regione = debiti_full %>% filter(tot_debito > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debito_per_regione = merge(debito_per_regione, regions_data, by="regione_residenza")
ggplot(debito_per_regione) +
geom_bar(aes(x = reorder(Denominazione.Regione, +median), y = median, fill = Ripartizione.geografica), stat="identity") +
coord_flip() +
labs(x = "Regione", y = "Debito residuo mediano per regione")
debiti_full %>% filter(tot_debito > 0) %>% group_by(ampiezza_comune) %>% summarize(mean = mean(tot_debito), median = median(tot_debito), sd = sd(tot_debito)) %>% arrange(desc(mean))
debiti_full = debiti_full %>% mutate(rapp_perc = NPERC/numero_componenti)
ggplot(debiti_full %>% filter(tot_debito > 0)) +
geom_point(aes(x=rapp_perc, y = tot_debito))
model = lm(tot_debito ~ rapp_perc, data = debiti_full %>% filter(tot_debito > 0))
summary(model)
con_deb = debiti_full %>% filter(tot_debito > 0)
con_deb = con_deb %>% mutate(perc_gar_real = deb_garanzie_reali/tot_debito)
con_deb = con_deb %>% mutate(perc_gar_non_real = 1-perc_gar_real)
con_deb %>% filter(NQUEST == 8788)
ggplot(con_deb) +
geom_histogram(aes(x = perc_gar_real))
summary(con_deb$perc_gar_real)
con_deb = con_deb %>% mutate(gar_real = ifelse(perc_gar_real > 0.75, 1, 0))
con_deb %>% group_by(gar_real) %>% summarize(count = n())
tipo = con_deb %>% select(NQUEST, gar_real)
hs_eta = carcom %>% group_by(NQUEST) %>% summarize(eta_media = mean(ETA))
con_deb = merge(con_deb, hs_eta, by="NQUEST")
ggplot(con_deb) +
geom_point(aes(x = eta_media, y = tot_debito)) +
scale_y_log10()
m1 = lm(tot_debito ~ eta_media, data = con_deb)
summary(m1)
ggplot(con_deb) +
geom_point(aes(x = eta_media, y = gar_real))
#Vediamo se a livello geografico c'è una qualche differenza  tra chi ah debiti con garanzie reali e chi no
perc_gar_real_reg = con_deb %>% group_by(regione_residenza) %>% summarize(perc_con_gar_real = sum(gar_real)/n()) %>% arrange(desc(perc_con_gar_real))
perc_gar_real_reg
perc_gar_real_reg = merge(perc_gar_real_reg, regions_data, by="regione_residenza")
perc_gar_real_reg
ggplot(perc_gar_real_reg) +
geom_bar(aes(x = reorder(Denominazione.Regione, +perc_con_gar_real), y = perc_con_gar_real, fill = Ripartizione.geografica), stat="identity") +
coord_flip() +
labs(x = "Regione", y = "% di debiti con garanzie reali sul totale ")
con_deb
tot_fam_NO_PFIMM = sum(debiti$deb_res_immobili == 0)
cat('Il totale delle households senza PFIMM è: ', tot_fam_NO_PFIMM, '\n')
tot_fam_PFIMM = sum(debiti$deb_res_immobili > 0)
cat('Il totale delle households con PFIMM è: ', tot_fam_PFIMM, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per acquisto/ristrutturazione immobili è: ', (tot_fam_PFIMM/(tot_fam_NO_PFIMM+tot_fam_PFIMM))*100,'%', '\n')
pfimm = debiti %>% select(deb_res_immobili) %>% filter(deb_res_immobili != 0)
summary(pfimm)
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili, y = ..density..)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
# UTILE?
ggplot(pfimm, aes(x = pfimm$deb_res_immobili)) +
geom_boxplot()
carcom_per_debito = carcom %>% select(NQUEST, numero_componenti, area_geografica, regione_residenza, ampiezza_comune)
# ora elimino i duplicati dal dataframe
carcom_per_debito = distinct(carcom_per_debito)
debiti_full = merge(carcom_per_debito, debiti, by="NQUEST")
head(debiti_full)
# Qui ci sta lasciare la mediana invece della media
pfimm_n_componenti = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(numero_componenti) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
ggplot(pfimm_n_componenti, aes(x = numero_componenti, y = median)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Mediana del debito residuo per numero di componenti",
x = "Numero di componenti",
y = "Media del debito residuo")
# Perchè qua ho NA su sd?
pfimm_area_geografica = debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange()
pfimm_area_geografica
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfimm_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
scale_x_discrete(labels = etichette_aree)
debiti_full %>% filter(deb_res_immobili > 0) %>% group_by(regione_residenza) %>% summarize(mean = mean(deb_res_immobili), median = median(deb_res_immobili), sd = sd(deb_res_immobili)) %>% arrange(desc(mean))
tot_fam_NO_PFAZ = sum(debiti$deb_res_professione == 0)
cat('Il totale delle households senza PFAZ è:', tot_fam_NO_PFAZ, '\n')
tot_fam_PFAZ = sum(debiti$deb_res_professione > 0)
cat('Il totale delle households con PFAZ è:', tot_fam_PFAZ, '\n')
cat('La percentuale di households che nel 2020 presentano debito residuo per motivi professionali è:', (tot_fam_PFAZ/(tot_fam_NO_PFAZ+tot_fam_PFAZ))*100,'%', '\n')
pfaz = debiti %>% select(deb_res_professione) %>% filter(deb_res_professione != 0)
summary(pfaz)
library(ggplot2)
ggplot(pfaz, aes(x = deb_res_professione)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = median(pfaz$deb_res_professione), color = 'red') +
geom_vline(xintercept = mean(pfaz$deb_res_professione), color = 'green') +
scale_x_log10()
carcom_pfaz = carcom %>% filter(CFRED == 1) %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
debiti_pfaz %>% select(NQUEST, qualifica_lavoratore,deb_res_professione) %>% filter(deb_res_professione > 0) %>%arrange(desc(NQUEST))
pfaz_status = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(status_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette = c('1 - Employee', '2 - Self-employed', '3 - Non-Professional')
colori = c('darkorange', 'darkred', 'darkblue')
ggplot(pfaz_status, aes(x = status_lavoratore, y = mean)) +
geom_bar(stat = 'identity', fill = colori) +
scale_x_discrete(labels = etichette)
#Quqesto forse meh
pfaz_qual = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(qualifica_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange() %>% mutate('Qualifica' = c('operaio', 'impiegato', 'dirigente', 'imprenditore/libero professionista', 'altro autonomo', 'pensionato', 'altro non occupato')) %>% select(Qualifica, everything())
colori = c('lightgreen', 'lightblue', 'lightpink', 'yellow', 'darkorange', 'red', 'darkblue')
pie(pfaz_qual$mean, labels = pfaz_qual$Qualifica, col = colori)
pfaz_sett = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(settore)%>% mutate(Settore = case_when(
settore == 1 ~ "Agricoltura",
settore == 2 ~ "Industria",
settore == 3 ~ "Servizi Pubblici",
settore == 4 ~ "Altri settori",
settore == 5 ~ "Nessun settore")) %>% select(Settore, everything())
pfaz_sett_summarize = pfaz_sett %>% filter(deb_res_professione > 0) %>% group_by(settore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
ggplot(pfaz_sett, aes(x = Settore, y = deb_res_professione)) +
geom_boxplot() +
scale_y_log10()
pfaz_area_geografica = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(area_geografica) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
etichette_aree = c('Nord-Ovest', 'Nord-Est', 'Centro', 'Sud', 'Isole')
ggplot(pfaz_area_geografica, aes(x = area_geografica, y = "", fill = mean)) +
geom_tile() +
scale_fill_gradient(low = "lightyellow", high = "darkorange") +
scale_x_discrete(labels = etichette_aree)
debiti$deb_carte_credito <- replace(debiti$deb_carte_credito, is.na(debiti$deb_carte_credito), 0)
tot_fam_NO_PFCARTE = sum(debiti$deb_carte_credito == 0)
cat('Il totale di household senza PFCARTE è: ', tot_fam_NO_PFCARTE, '\n')
tot_fam_PFCARTE = sum(debiti$deb_carte_credito > 0)
cat('Il totale di household con PFCARTE è: ', tot_fam_PFCARTE, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCARTE/(tot_fam_NO_PFCARTE + tot_fam_PFCARTE))*100,'%', '\n')
#Ha senso fare un'analisi considerando le variabili di carcom dal momento che abbiamo 47 households con debito su carta di credito????
debiti$deb_scoperto_cc <- replace(debiti$deb_scoperto_cc, is.na(debiti$deb_scoperto_cc), 0)
tot_fam_NO_PFCC = sum(debiti$deb_scoperto_cc == 0)
cat('Il totale di household senza PFCC è: ', tot_fam_NO_PFCC, '\n')
tot_fam_PFCC = sum(debiti$deb_scoperto_cc > 0)
cat('Il totale di household con PFCC è: ', tot_fam_PFCC, '\n')
cat('La percentuale di household con debito su carte di credito è: ', (tot_fam_PFCC/(tot_fam_NO_PFCC + tot_fam_PFCC))*100,'%', '\n')
deb_scoperto = debiti %>% filter(deb_scoperto_cc > 0)
ggplot(deb_scoperto, aes(x = deb_scoperto_cc)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = mean(deb_scoperto$deb_scoperto_cc), color = 'green') +
geom_vline(xintercept = median(deb_scoperto$deb_scoperto_cc), color = 'red')
# Qui dovete mettere il vostro path
setwd("C:\\Users\\Alberto-PC\\Downloads\\ind20_ascii\\CSV")
carcom_pfaz = carcom %>% filter(CFRED == 1) %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
carcom_pfaz
debiti_pfaz = merge(carcom_pfaz,debiti, by = "NQUEST")
debiti_pfaz %>% select(NQUEST, qualifica_lavoratore,deb_res_professione) %>% filter(deb_res_professione > 0) %>%arrange(desc(NQUEST))
pfaz_status = debiti_pfaz %>% filter(deb_res_professione > 0) %>% group_by(status_lavoratore) %>% summarize(mean = mean(deb_res_professione), median = median(deb_res_professione), sd = sd(deb_res_professione)) %>% arrange()
library(ggplot2)
ggplot(pfimm, aes(x = deb_res_immobili, y = ..density..)) +
geom_histogram(bins = 60) +
geom_vline(xintercept = median(pfimm$deb_res_immobili), color = 'red') +
geom_vline(xintercept = mean(pfimm$deb_res_immobili), color = 'green')
carcom_pfaz = carcom %>% filter(CFRED == 1) %>% select(NQUEST, classe_eta, numero_componenti, PERL, NPERL, status_lavoratore, qualifica_lavoratore, settore, area_geografica)
debiti20
debiti
debiti20 = debiti
percent_residual_debt_transportation <- sum(debiti20$TDEBITC, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_durable <- sum(debiti20$TDEBITD, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_nondurable <- sum(debiti20$TDEBITE, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_other_everydayexpenses <- sum(debiti20$TDEBITF, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_education <- sum(debiti20$TDEBITG, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
perc <- data.frame(
"Percent_residual_debt" = c(
"Transportation" = percent_residual_debt_transportation,
"Durable" = percent_residual_debt_durable,
"Non-durable" = percent_residual_debt_nondurable,
"Other Everyday Expenses" = percent_residual_debt_other_everydayexpenses,
"Education" = percent_residual_debt_education))
print(perc)
percentages <- c(
"Transportation" = percent_residual_debt_transportation,
"Durable" = percent_residual_debt_durable,
"Non-durable" = percent_residual_debt_nondurable,
"Other Everyday Expenses" = percent_residual_debt_other_everydayexpenses,
"Education" = percent_residual_debt_education)
df <- data.frame(
group = names(percentages),
value = percentages)
pie_chart <- ggplot(df, aes(x = "", y = value, fill = group)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
ggtitle("Percentage of Residual Debt by Category") +
theme_void()
print(pie_chart)
carcom20 = filter(carcom20, CFRED == 1)
alld2_prof
carcom20 = carcom
debiti20 = debiti
percent_residual_debt_transportation <- sum(debiti20$TDEBITC, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_durable <- sum(debiti20$TDEBITD, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_nondurable <- sum(debiti20$TDEBITE, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_other_everydayexpenses <- sum(debiti20$TDEBITF, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
percent_residual_debt_education <- sum(debiti20$TDEBITG, na.rm = TRUE) / sum(debiti20$PFCONS, na.rm = TRUE)
perc <- data.frame(
"Percent_residual_debt" = c(
"Transportation" = percent_residual_debt_transportation,
"Durable" = percent_residual_debt_durable,
"Non-durable" = percent_residual_debt_nondurable,
"Other Everyday Expenses" = percent_residual_debt_other_everydayexpenses,
"Education" = percent_residual_debt_education))
print(perc)
carcom20 = filter(carcom20, CFRED == 1)
# per prima cosa andiamo a sostituire i NaN con 0 e per calcolare quante persone hanno pagato delle rate nel 2020, facciamo il rapporto tra quelli che avevano tot_rate_pagate > 0 / (tot_rate_pagate = 0 + tot_rate_pagate != 0)
debiti$tot_rate_pagate[is.na(debiti$tot_rate_pagate)] = 0
si_rate = debiti$tot_rate_pagate[debiti$tot_rate_pagate > 0]
perc_rate_pagate = length(si_rate)/(length(debiti$tot_rate_pagate))*100
cat('Il totale di households che nel 2020 hanno pagato rate è:',perc_rate_pagate, '%')
# consideriamo poi soltanto i questionari con tot rate > 0
summary(si_rate)
rate_pagate = debiti %>% filter(tot_rate_pagate > 0)
ggplot(rate_pagate, aes(x = tot_rate_pagate, y = ..density..)) +
geom_histogram(col = 'purple', fill = 'lightpink') +
scale_x_log10() +
labs(title = 'Distribuzione rate pagate nel 2020', x = 'rate pagate', y = 'density')
# creiamo un dataset con la scomposizione delle rate pagate nel 2020
percentuali_dataset <- debiti %>% filter(tot_rate_pagate >0) %>%
mutate(Perc_res = round((tot_rate_res / tot_rate_pagate) * 100, 1),
Perc_fam = round((tot_rate_fam / tot_rate_pagate) * 100, 1),
Perc_prof = round((tot_rate_professione / tot_rate_pagate) * 100, 1),
Perc_aimm = round((tot_rate_altri_immobili / tot_rate_pagate) * 100, 1))
percentuali_dataset = percentuali_dataset %>% select(NQUEST, tot_rate_pagate, tot_rate_res, tot_rate_fam, tot_rate_professione, tot_rate_altri_immobili, Perc_res, Perc_fam, Perc_prof, Perc_aimm)
percentuali_dataset
# andiamo a sommare i valori e vediamo com'è la scomposizione generale del totale rate pagate nel 2020
valore_res = round((sum(percentuali_dataset$tot_rate_res[percentuali_dataset$tot_rate_res > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_fam = round((sum(percentuali_dataset$tot_rate_fam[percentuali_dataset$tot_rate_fam > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_prof = round((sum(percentuali_dataset$tot_rate_professione[percentuali_dataset$tot_rate_professione > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
valore_aimm = round((sum(percentuali_dataset$tot_rate_altri_immobili[percentuali_dataset$tot_rate_altri_immobili > 0]) / sum(percentuali_dataset$tot_rate_pagate[percentuali_dataset$tot_rate_pagate > 0])) *100, 2)
categoria = c('Res', 'Fam', 'Aimm', 'Prof')
valori = c(valore_res, valore_fam, valore_aimm, valore_prof)
dataframe = data.frame(categoria, valori)
dataframe
# creaiamo un grafico a barre
ggplot(dataframe, aes(x = categoria, y = valori)) +
geom_bar(stat = 'identity', fill = heat.colors(length(dataframe$categoria)))
TOT <- read.csv("E:/Dati_al_10.03.2024/Fam_Comp_Completo_PESOFIT/Fam_Comp_Completo_PESOFIT.csv", sep =";")
